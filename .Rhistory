2+2
a <-(1,2,3)
a <- c(1,2,3)
a
seq(0,1,length=5)
rep(10,3)
a <- 1
a
if (a<1)
{print("a=1") }
a<- 1
typeof (x)
x <- if (2 > 3) "bar" else "baz"
x
x <- 1:5
ifelse(x > 3, "bar", "baz")
?ifelse
maybe_square <- function(x) {
if (x %% 2 == 0) {
x ** 2
} else {
x
}
}
maybe_square(1:5)
maybe_square(1:6)
maybe_square(6)
maybe_square(6)
maybe_square <- function(x) {
ifelse (x %% 2 == 0, x ** 2, x)
}
maybe_square(1:5)
maybe_square <- function(x) {
if (x %% 2 == 0) {
x ** 2
} else {
x
}
}
maybe_square <- Vectorize(maybe_square)
maybe_square(1:5)
x <- 1:5
total <- 0
index <- 1
while (index <= length(x)) {
element <- x[index]
index <- index + 1
total <- total + element
}
total
x[index]
index < length(x)
x <- 1:5
total <- 0
index <- 1
repeat {
element <- x[index]
total <- total + element
index <- index + 1
if (index > length(x)) break
}
total
total
f <- factor(c("small", "small", "medium",
"large", "small", "large"))
f
f
levels(f)
of <- factor(c("small", "small", "medium",
"large", "small", "large"),
levels = c("small", "medium", "large"),
ordered = TRUE)
of
v <- 1:4
names(v) <- LETTERS[1:4]
v
v <- 1:4
names(v) <- LETTERS[1:4]
v
(ff <- factor(LETTERS[1:4]))
v[ff]
df <- data.frame(a = 1:4, b = letters[1:4])
df
df <- data.frame(a = 1:4, b = letters[1:4])
df
install.packages("magrittr")
package::f()
package::f()
library(magrittr)
library(datasets)
library(help = "datasets")
data("cars")
head(cars)
cars %>% qplot(speed, dist, data = .)
cars %>% qplot(speed, dist, data = .)
install.packages("mlbench")
cars %>% head(3)
cars %>% head(3)
cars %>% summary
data("iris")
iris %>% summary
iris %>% summary
first_name = c("Abi","Anand","Ashish")
rank =c(1,2,3)
bool = c(FALSE,FALSE,TRUE)
fr <- data.frame(first_name,rank,bool)
dim(fr)
names(fr)
trees
str(trees)
install.packages("jsonlite")
install.packages("httr")
library(jsonlite)
names(jd)
install.packages("foreach")
library(foreach)
foreach(i=1:10) %do%
rnorm(i)
install.packages("doParallel")
con <- url("http://www.jhsph.edu","r")
x <- readLines(con)
head(x)
install.packages("slidify)
install.packages("slidify")
install.packages("slidify")
install.packages("devtools")
install.packages("kernSmooth")
linbrary("kernSmooth")
linbrary("kernSmooth")
linbrary(kernSmooth)
library("kernSmooth")
library(kernSmooth)
library("KernSmooth")
install.packages("reshape")
library(reshape)
?merge
merge
?Hmics
install.packages("Hmisc")
library(Hmisc)
lml <- lm(trees$Volume ~ trees$Height + trees$Girth)
summary(lml)
plot(lml)
Help
help()
getwd()
library(datasets)
data(iris)
iris
head(iris)
if (iris$Species="virginica") {mean(iris$Sepal.Length)}
if (iris$Species="virginica") {mean(iris$Sepal.Length)}
if (iris$Species='virginica') {mean(iris$Sepal.Length)}
round(mean(iris[which(iris$Species == "virginica"),]$Sepal.Length))
if (iris$Species=="virginica") {round(mean(iris$Sepal.Length))}
round(mean(iris[which(iris$Species == "virginica"),]$Sepal.Length))
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
head(mtcars)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
swirl()
library(swirl)
swirl()
getwd()
ls()
x<-9
ls()
dir()
?list.files
args(list.files)
old.dir<-getwd()
dir.create(testdir)
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path(…, fsep = .Platform$file.sep)
file.path(getwd(), "mytest3.R")
file.path("mytest3.R")
file.path('folder1','folder2')
?dir.create
dir.create(file.path("testdir2","testdir3"))
dir.create(file.path("testdir2","testdir3"), recursive = TRUE)
setwd(old.dir)
swirl()
swirl()
1:20
pi:10
15:1
?':'
seq(1,20)
seq(0,10,by=0.5)
seq(5,10,length=30)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along((my_seq))
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
environment()
.GlobalEnv
f <- function(f_x){
g <- function(g_x){
print("Inside g")
print(environment())
print(ls())
}
g(5)
print("Inside f")
print(environment())
print(ls())
}
environment()
.GlobalEnv
f(6)
library(swirl)
packageVersion("swirl")
install_from_swirl("Getting and Cleaning Data")
url <- dowmload.file(url = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv",destfile=reviews.csv",method="curl"
download.file(url='https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv',
destfile='localfile.zip', method='curl')
f = read.csv('destfile')
getwd()
getwd()
swirl()
library(swirl)
swirl()
myplot(2)
myplot(20)
myplot2(2)
qt(.975,2)
myplot2(20)
sleep
range(g1)
range(g2)
difference <- g1-g2
difference <- g2-g1
mean(difference)
s<-sd(difference)
mn +c(-1,1)*qt(.975,9)*s/sqrt(10)
t.test(difference)
t.test(difference)$conf.int
sp <- 7*15.34^2 + 20*18.23^2
ns<-8+21-2
sp<-sqrt(sp/ns)
132.86-127.44+c(-1,1)*qt(.975,ns)*sp*sqrt(1/8+1/21)
sp <- sqrt((9*var(g1)+9*var(g2))/18)
md + c(-1,1)*qt(.975,18)*sp*sqrt(1/5)
t.test(g2,g1,paired=FALSE,var.equal=TRUE)$conf
t.test(g2,g1,paired=TRUE,var.equal=TRUE)$conf
t.test(g2,g1,paired=TRUE)$conf
num<-(15.34^2/8 + 18.23^2/21)^2
den <- 15.34^4/8^2/7 + 18.23^4/21^2/20
mydf<-num/den
132.86-127.44 +c(-1,1)*qt(.975,mydf)*sqrt(15.34^2/8 + 18.23^2/21)
swirl()
myplot(34)
myplot(33.3)
myplot(30)
myplot(28)
z<-qnorm(.95)
pnorm(30+z,mean = 30,lower.tail = FALSE)
x <- c(0.18, -1.54, 0.42, 0.95)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
sum(x * w) / sum(w)
q
library(swirl)
swirl()
install.packages("leafLet")
install.packages("leaflet")
---
title: "Leaflet"
author: "Saloni Agarwal"
date: "23 Nov 2021"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
```{r,echo=FALSE}
library(leaflet)
my_map <- leaflet() %>%
addTiles()
my_map
```
```{r,echo=FALSE}
library(leaflet)
my_map <- leaflet() %>%
addTiles()
my_map
```
---
title: "Leaflet"
author: "Saloni Agarwal"
date: "23 Nov 2021"
output: html_document
---
##```{r setup, include=FALSE}
##knitr::opts_chunk$set(echo = TRUE)
##```
```{r,echo=FALSE}
library(leaflet)
my_map <- leaflet() %>%
addTiles()
my_map
```
```{r,echo=FALSE}
library(leaflet)
my_map <- leaflet() %>%
addTiles()
my_map
```
knitr::opts_chunk$set(echo = TRUE)
my_map = leaflet()
my_map = addTiles(my_map)
my_map
my_map <- leaflet() %>%
addMarkers(lat = 39.2980803,lng = 76.5898801,popup = "Leak's Office")
my_map
```{r,echo=FALSE}
my_map <- leaflet() %>%
addMarkers(lat = 39.2980803,lng = 76.5898801,popup = "Leak's Office")
my_map
---
title: "Leaflet"
author: "Saloni Agarwal"
date: "23 Nov 2021"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
```{r,echo=FALSE}
library(leaflet)
my_map <- leaflet() %>%
addMarkers(lat = 39.2980803,lng = 76.5898801,popup = "Leak's Office")
my_map
```
```{r,echo=FALSE}
library(leaflet)
my_map <- leaflet() %>%
addTiles()
my_map
```
```{r,eval=FALSE}
df < data.frame(lat=runif(20,min=39.2,max = 39.3),lng=runif(20,min = -76.6,max = -76.5))
data.frame(lat=runif(20,min=39.2,max = 39.3),lng=runif(20,min = -76.6,max = -76.5))
df
head(df)
df < data.frame(lat=runif(20,min=39.2,max = 39.3),lng=runif(20,min = -76.6,max = -76.5))
unlink('C:/Users/abinashi.prakash/Desktop/Coursera/Git/R Markdown and Leaflet_cache', recursive = TRUE)
install.packages("plotly")
---
title: "R_Markdown_Presentation"
author: "Saloni Agarwal"
date: "23 Nov 2021"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
##R Package
### Create a web page presentation using R Markdown that features a plot created with Plotly.
###Host your webpage on either GitHub Pages, RPubs, or NeoCities. Your webpage must contain the date that you created the document, and it must contain a plot created with Plotly.
###The following R Code plots the weight-height relationship of U.S. women using the R built-in dataset of “women” and fits a linear regression line through the plot.
```{r ,echo=FALSE}
library(plotly)
library(ggplot2)
data(mtcars)
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$am <- factor(mtcars$am, labels = c("Manual", "Automatic"))
g <- ggplot(mtcars, aes(mpg, fill = as.factor(cyl)))+
geom_histogram(binwidth = 1) +
ggtitle("Miles per gallon") +
facet_wrap(~am)
ggplotly(g)
```
q
install.packages("devtools")
devtools::install_github("jhudsl/collegeIncome")
library(collegeIncome)
data(college)
devtools::install_github("jhudsl/matahari")
dance_start(value = FALSE, contents = FALSE)
library(dance_start)
dance_start(value = FALSE, contents = FALSE)
dance_save("~/Desktop/college_major_analysis.rds")
shiny::runApp('C:/Users/saloni.agarwal/Desktop/Coursera/Reproducible_Pitch')
install.packages("HistData")
runApp('C:/Users/saloni.agarwal/Desktop/Coursera/Reproducible_Pitch')
runApp('C:/Users/saloni.agarwal/Desktop/Coursera/Reproducible_Pitch')
runApp('C:/Users/saloni.agarwal/Desktop/Coursera/Reproducible_Pitch')
runApp('C:/Users/saloni.agarwal/Desktop/Coursera/Reproducible_Pitch')
runApp('C:/Users/saloni.agarwal/Desktop/Coursera/Reproducible_Pitch')
runApp('C:/Users/saloni.agarwal/Desktop/Coursera/Reproducible_Pitch')
runApp('C:/Users/saloni.agarwal/Desktop/Coursera/Reproducible_Pitch')
plot_ly(data = mtcars, x = ~wt, y = ~mpg,
color = ~as.factor(cyl), size = ~hp,
text = ~paste("Weight: ", wt, '<br>MPG:', mpg),
type = "scatter", mode = "markers") %>%
layout(title = "Car Data")
unlink('C:/Users/saloni.agarwal/Desktop/Coursera/Git/R_Package_Week-3_Course-9_cache', recursive = TRUE)
runApp('C:/Users/saloni.agarqa/Desktop/Coursera/Reproducible_Pitch')
setwd("C:/Users/abinashi.prakash/Desktop/Coursera/Reproducible_Pitch")
runApp()
